name: 'Build Owlcat Mod'
description: 'Builds an Owlcat Mod project and outputs relevant build information.'
author: 'xADDBx'

branding:
  icon: 'code'
  color: 'black'

inputs:
  GAME_NAME:
    description: 'Name of the game which the mod targets'
    required: true
    default: Wrath
    options:
      - Kingmaker
      - Wrath
      - RogueTrader
  GITHUB_TOKEN:
    description: 'GitHub token for accessing the package registry.'
    required: true
  GITHUB_NAME:
    description: 'Account used to connect to package registry.'
    required: false
    default: '${{ github.repository_owner }}'
  PACKAGE_OWNER:
    description: 'Account which owns package.'
    required: false
    default: 'xADDBx'
  BRANCH_REF:
    description: 'Ref (e.g., branch, tag, SHA) to checkout.'
    required: false
    default: null
  DEPENDENCY_LINKS:
    description: 'Comma-separated list of direct download links to dependencies'
    required: false
    default: ''
  DEPENDENCY_NAMES:
    description: 'Comma-separated list of directory names in which the downloaded files will be put'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.BRANCH_REF }}

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Add NuGet Source
      shell: pwsh
      run: nuget sources add -name github -source https://nuget.pkg.github.com/${{ inputs.PACKAGE_OWNER }}/index.json -username ${{ inputs.GITHUB_NAME }} -password ${{ inputs.GITHUB_TOKEN }} -StorePasswordInClearText -Verbosity detailed

    - name: Install NuGet package
      shell: pwsh
      run: nuget install ${{ inputs.GAME_NAME }}GameAssemblies -Source github -OutputDirectory GameFiles -DependencyVersion Highest -DirectDownload -PreRelease -Verbosity detailed

    - name: Restore
      shell: pwsh
      run: dotnet restore

    - name: Find subdirectory
      id: find-dir
      shell: pwsh
      run: |
        $currentPath = "${{ github.workspace }}"
        $prefixPath = Join-Path -Path $currentPath -ChildPath 'GameFiles'
        $subdirectory = Get-ChildItem -Path $prefixPath -Directory | Select-Object -First 1 -ExpandProperty Name
        $versionSuffix = [regex]::Match($subdirectory, '(?<=\d+\.\d+\.\d+-).+$').Value
        $versionNumber = [regex]::Match($subdirectory, '\d+\.\d+\.\d+').Value
        $fullPath = Join-Path -Path $prefixPath -ChildPath $subdirectory
        echo "fullPath=$fullPath" >> $env:GITHUB_ENV
        echo "gameVersionNum=$(echo $versionNumber)" >> $env:GITHUB_ENV
        echo "gameVersionSuffix=$(echo $versionSuffix)" >> $env:GITHUB_ENV

    - name: Install Dependencies
      shell: pwsh
      run: |
        $links = "${{ inputs.links }}"
        $names = "${{ inputs.names }}"
        if (-not [string]::IsNullOrEmpty($links) -and -not [string]::IsNullOrEmpty($names)) {
          $linksArray = $links -split ","
          $namesArray = $names -split ","
          if ($linksArray.Length -ne $namesArray.Length) {
            Write-Error "The number of links and names must be the same"
            exit 1
          }
          for ($i = 0; $i -lt $linksArray.Length; $i++) {
            Invoke-WebRequest -Uri $($linksArray[$i]) -OutFile "dep.zip"
            $destinationPath = Join-Path -Path "{{ env.fullPath }}\Assemblies" -ChildPath $($namesArray[$i])        
            if (-not (Test-Path -Path $destinationPath)) {
              New-Item -ItemType Directory -Path $destinationPath -Force | Out-Null
            }
            Expand-Archive -Path "dep.zip" -DestinationPath $destinationPath -Force
          }
        }

    - name: Build Project
      shell: pwsh
      run: msbuild /p:Configuration=Release /p:${{ inputs.GAME_NAME }}Data="${{ env.fullPath }}\UserDataDir" /p:${{ inputs.GAME_NAME }}InstallDir="${{ env.fullPath }}\Assemblies" /p:OutputPath=Out\Bin

    - name: Find zip file
      id: find-zip
      shell: pwsh
      run: |
        $prefixPath = "${{ github.workspace }}"
        $zipFileObject = Get-ChildItem -Recurse -Path $prefixPath -Filter "*.zip" | Where-Object { $_.Directory.Name -eq 'Out' } | Select-Object -First 1
        $zipFile = $zipFileObject.BaseName
        $zipFilePath = (Get-Item $zipFileObject.FullName).Directory.FullName
        echo "zipFile=$(echo $zipFile)" >> $env:GITHUB_ENV
        echo "zipFilePath=$(echo $zipFilePath)" >> $env:GITHUB_ENV
        $outDir = Join-Path -Path $zipFilePath -ChildPath 'Bin'
        echo "outDir=$(echo $outDir)" >> $env:GITHUB_ENV
